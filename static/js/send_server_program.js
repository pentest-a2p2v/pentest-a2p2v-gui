// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: Copyright 2018-2023 Toshiba Corporation and Peraton Labs, Inc.
// See README.md for license details

var sendServerProgram = (function () {

    // private

    /** server address */
    var g_server_address = "";

    /** attack path request URL */
    var g_attack_path_search = "/api/attack_path_search";
    /** get attack path file URL */
    var g_attack_path_file_get = "/api/attack_path_file_get";
    /** URL for initiating attack execution */
    var g_executor_start = "/api/executor/start";
    /** URL for reading attack execution console */
    var g_executor_read_console = "/api/executor/read_console";
    /** URL for stopping attack execution */
    var g_executor_stop = "/api/executor/stop";

    /** callback for success */
    var g_callbackDone = null;
    /** callback for failure */
    var g_callbackFail = null;

    /**
     * get result detail
     * @param xhr XMLHttpRequest
     */
    function getResultDetail(xhr) {
        let resultDetail = "";
        if (xhr.responseJSON) {
            if (xhr.responseJSON.resultDetail) {
                resultDetail = xhr.responseJSON.resultDetail;
            }
        }

        return resultDetail;
    }

    /**
     * get attack path file
     * @param attackPathFilename attack path name
     */
    function getAttackPathFile(attackPathFilename) {
        var sendData = {};
        sendData.attackPathFilename = attackPathFilename;

        let url_val = g_server_address + g_attack_path_file_get;
        $.ajax({
            url: url_val,
            data: sendData
        }).done(function (res, textStatus, xhr) {
            if (g_callbackDone) {
                g_callbackDone(res, textStatus, xhr);
            }
        }).fail(function (xhr, status, errorThrown) {
            let resultDetail = getResultDetail(xhr);
            if (g_callbackFail) {
                g_callbackFail(xhr, status, errorThrown, resultDetail);
            }
        });

        return false;
    }

    // public

    return {
        /**
         * initialize attack path planner callbacks
         * @param callbackDone callback for success
         * @param callbackFail callback for fail
         */
        init: function (callbackDone, callbackFail) {
            // set callback
            g_callbackDone = callbackDone;
            g_callbackFail = callbackFail;

            $.ajaxSetup({
                type: 'post',
                cache: false,
                dataType: 'json',
                timeout: 30000
            });
        },

        /**
         * request attack path search
         * @param attackingHostId attacking host ID
         * @param targetHostId target host ID
         * @param targetStateId target state ID
         * @param networkFileId network configuration file ID
         * @param scanResultFileId scan result file ID
         * @param maxHopsId input element ID for max hops
         */
        attackPathSearch: function (attackingHostId, targetHostId, targetStateId, networkFileId, scanResultFileId, maxHopsId) {
            let formData = new FormData();

            let attackingHost = $("#" + attackingHostId).val();
            let targetHost = $("#" + targetHostId).val();
            let targetState = $("#" + targetStateId).val();
            let networkFile = $("#" + networkFileId);
            let scanResultFile = $("#" + scanResultFileId);
            let maxHops = $("#" + maxHopsId).val();

            formData.append("attackingHost", attackingHost);
            if (targetHost) {
                formData.append("targetHost", targetHost);
            } else if (targetState) {
                formData.append("targetState", targetState);
            }
            formData.append("maxHops", maxHops);
            formData.append("files", networkFile.prop("files")[0]);
            formData.append("files", scanResultFile.prop("files")[0]);

            let url_val = g_server_address + g_attack_path_search;
            $.ajax({
                url: url_val,
                processData: false,
                contentType: false,
                data: formData
            }).done(function (res, textStatus, xhr) {
                if (res.attackPathFilename == '') {
                    alert("No attack paths found");
                    document.getElementById("search_button").disabled = false;
                } else {
                    // get attack file
                    getAttackPathFile(res.attackPathFilename);
                }
            }).fail(function (xhr, status, errorThrown) {
                let resultDetail = getResultDetail(xhr);
                if (g_callbackFail) {
                    g_callbackFail(xhr, status, errorThrown, resultDetail);
                }
            });

            return false;
        },

        /**
         * request attack path execution
         * @param attackPathJsonBlob Blob data for attack path .json
         * @param treenum attack path ID
         * @param onExecuteStart callback function called before console is ready
         * @param onConsoleRead callback function for executor console reader
         * @param onConsoleComplete callback function for executor console completion
        */
        attackPathExecute: function (attackPathJsonBlob, treenum, onExecuteStart, onConsoleRead, onConsoleComplete) {
            let formData = new FormData();
            formData.append("attackPathJson", attackPathJsonBlob);
            formData.append("treenum", treenum);
            // formData.append("lhost", lhost);

            $.ajax({
                url: g_server_address + g_executor_start,
                processData: false,
                contentType: false,
                data: formData
            }).done(function (res, textStatus, xhr) {
                if (res.sessid) {
                    var stopExec = function(onSuccess) {
                        $.ajax({
                            url: g_server_address + g_executor_stop + '/' + sessid,
                            processData: false,
                            contentType: false,
                            data: ""
                        }).done(function (res, textStatus, xhr) {
                            onSuccess();
                        }).fail(function (xhr, status, errorThrown) {
                            let resultDetail = getResultDetail(xhr);
                            if (g_callbackFail) {
                                g_callbackFail(xhr, status, errorThrown, resultDetail);
                            }
                        });
                    }
                    onExecuteStart(stopExec);
                    var readConsole = null;
                    var sessid = res.sessid;
                    readConsole = function() {
                        $.ajax({
                            url: g_server_address + g_executor_read_console + '/' + sessid,
                            processData: false,
                            contentType: false,
                            data: ""
                        }).done(function (res, textStatus, xhr) {
                            if (res.result == 'success') {
                                onConsoleRead(res.lines);
                                setTimeout(readConsole, 0);
                            } else if (res.result == 'complete') {
                                onConsoleComplete(res.report);
                            }
                        }).fail(function (xhr, status, errorThrown) {
                            let resultDetail = getResultDetail(xhr);
                            if (g_callbackFail) {
                                g_callbackFail(xhr, status, errorThrown, resultDetail);
                            }
                        });
                    };
                    setTimeout(readConsole, 0);
                }
            }).fail(function (xhr, status, errorThrown) {
                let resultDetail = getResultDetail(xhr);
                if (g_callbackFail) {
                    g_callbackFail(xhr, status, errorThrown, resultDetail);
                }
            });
        },
    };
}());

